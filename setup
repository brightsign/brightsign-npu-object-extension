#!/bin/bash

# BrightSign YOLO Object Detection - Setup Script
# Prepares the build environment for cross-compilation

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Default Configuration
BRIGHTSIGN_OS_MAJOR_VERSION=${BRIGHTSIGN_OS_MAJOR_VERSION:-9.1}
BRIGHTSIGN_OS_MINOR_VERSION=${BRIGHTSIGN_OS_MINOR_VERSION:-52}

usage() {
    echo "Usage: $0 [OPTIONS]"
    echo "Setup BrightSign YOLO Object Detection build environment"
    echo ""
    echo "Options:"
    echo "  -y, --yes              Skip confirmation prompt"
    echo "  -v, --version VERSION  Set BrightSign OS version (e.g., 9.1.52)"
    echo "  --major VERSION        Set major.minor version (e.g., 9.1)"
    echo "  --minor VERSION        Set minor version number (e.g., 52)"
    echo "  -h, --help             Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                     # Interactive setup with default version"
    echo "  $0 -y                  # Automatic setup, no prompts"
    echo "  $0 -v 9.1.53           # Setup with specific OS version"
    echo ""
    echo "Default BrightSign OS version: ${BRIGHTSIGN_OS_MAJOR_VERSION}.${BRIGHTSIGN_OS_MINOR_VERSION}"
}

# Parse command line arguments
AUTO_YES=false
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -y|--yes) AUTO_YES=true; shift ;;
        -v|--version) 
            if [[ $2 =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                BRIGHTSIGN_OS_MAJOR_VERSION="${2%.*}"
                BRIGHTSIGN_OS_MINOR_VERSION="${2##*.}"
            elif [[ $2 =~ ^[0-9]+\.[0-9]+$ ]]; then
                BRIGHTSIGN_OS_MAJOR_VERSION="$2"
                BRIGHTSIGN_OS_MINOR_VERSION="0"
            else
                echo "Invalid version format: $2. Use major.minor or major.minor.patch"
                exit 1
            fi
            shift 2 ;;
        --major) 
            BRIGHTSIGN_OS_MAJOR_VERSION="$2"; shift 2 ;;
        --minor) 
            BRIGHTSIGN_OS_MINOR_VERSION="$2"; shift 2 ;;
        -h|--help)
            usage
            exit 0
            ;;
        *) echo "Unknown parameter: $1"; usage; exit 1 ;;
    esac
done

# Set the full version string
BRIGHTSIGN_OS_VERSION=${BRIGHTSIGN_OS_MAJOR_VERSION}.${BRIGHTSIGN_OS_MINOR_VERSION}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[$(date +'%T')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

error() {
    echo -e "${RED}❌ $1${NC}"
    exit 1
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# Prerequisites check
check_prerequisites() {
    log "Checking prerequisites..."
    
    # Check architecture
    if [[ "$(uname -m)" != "x86_64" ]]; then
        error "This build requires x86_64 architecture. Current: $(uname -m)"
    fi
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        error "Docker is required but not installed. Please install Docker first."
    fi
    
    # Check Docker daemon
    if ! docker info &> /dev/null; then
        error "Docker daemon is not running. Please start Docker."
    fi
    
    # Check required tools
    for tool in wget tar git cmake; do
        if ! command -v $tool &> /dev/null; then
            error "$tool is required but not installed."
        fi
    done
    
    # Check disk space (need ~25GB)
    available_space=$(df . | awk 'NR==2 {print $4}')
    required_space=$((25 * 1024 * 1024)) # 25GB in KB
    
    if [[ $available_space -lt $required_space ]]; then
        warn "Warning: Less than 25GB free space available. Build may fail."
        warn "Available: $(($available_space / 1024 / 1024))GB, Recommended: 25GB+"
    fi
    
    success "Prerequisites check passed"
}

# Setup Docker build environment
setup_docker() {
    log "Setting up Docker build environment..."
    
    # Check if BrightSign OS source archives exist
    if [[ ! -f "brightsign-${BRIGHTSIGN_OS_VERSION}-src-dl.tar.gz" ]] || 
       [[ ! -f "brightsign-${BRIGHTSIGN_OS_VERSION}-src-oe.tar.gz" ]]; then
        warn "BrightSign OS source archives not found locally"
        warn "Docker build will download them (~2-3GB)"
    else
        log "Using existing BrightSign OS source archives"
    fi
    
    # Build Docker image
    log "Building Docker image (this may take 10-30 minutes)..."
    docker build --rm \
        --build-arg USER_ID=$(id -u) \
        --build-arg GROUP_ID=$(id -g) \
        --build-arg BRIGHTSIGN_OS_VERSION=${BRIGHTSIGN_OS_VERSION} \
        --ulimit memlock=-1:-1 \
        -t yolo-build . || error "Failed to build Docker image"
    
    # Create srv directory for TFTP/NFS
    mkdir -p srv
    
    success "Docker environment ready"
}

# Download SDK if not present
download_sdk() {
    log "Checking for BrightSign SDK..."
    
    if [[ -f "brightsign-x86_64-cobra-toolchain-${BRIGHTSIGN_OS_VERSION}.sh" ]]; then
        log "SDK installer already present"
        return
    fi
    
    # Check if we have the source archives that contain the SDK
    if [[ -f "brightsign-${BRIGHTSIGN_OS_VERSION}-src-oe.tar.gz" ]]; then
        log "Extracting SDK from source archive..."
        # The SDK would need to be built from source, which is handled by Docker
        warn "SDK will be built inside Docker container"
    else
        warn "SDK installer not found. It will be built during Docker setup."
    fi
}

# Clone or update RKNN toolkit
clone_rknn_toolkit() {
    log "Setting up RKNN toolkit..."
    
    # Create toolkit directory if it doesn't exist
    mkdir -p toolkit
    
    # Clone or update rknn-toolkit2
    if [[ -d "toolkit/rknn-toolkit2" ]]; then
        log "rknn-toolkit2 already exists, updating..."
        cd toolkit/rknn-toolkit2
        git fetch || warn "Failed to fetch updates"
        git checkout v2.3.2 || warn "Failed to checkout v2.3.2 tag"
        cd ../..
    else
        log "Cloning rknn-toolkit2..."
        cd toolkit
        git clone https://github.com/airockchip/rknn-toolkit2.git || error "Failed to clone rknn-toolkit2"
        cd rknn-toolkit2
        git checkout v2.3.2 || error "Failed to checkout v2.3.2 tag"
        cd ../..
    fi
    
    # Clone or update rknn_model_zoo
    if [[ -d "toolkit/rknn_model_zoo" ]]; then
        log "rknn_model_zoo already exists, updating..."
        cd toolkit/rknn_model_zoo
        git fetch || warn "Failed to fetch updates"
        git checkout v2.3.2 || warn "Failed to checkout v2.3.2 tag"
        cd ../..
    else
        log "Cloning rknn_model_zoo..."
        cd toolkit
        git clone https://github.com/airockchip/rknn_model_zoo.git || error "Failed to clone rknn_model_zoo"
        cd rknn_model_zoo
        git checkout v2.3.2 || error "Failed to checkout v2.3.2 tag"
        cd ../..
    fi
    
    success "RKNN toolkit ready"
}

# Setup build directories
setup_build_directories() {
    log "Setting up build directories..."
    
    # Create platform-specific build directories
    for platform in XT5 LS5 Firebird; do
        mkdir -p "build_${platform,,}"
    done
    
    # Create model directory if it doesn't exist
    mkdir -p model
    
    # Ensure CMake files are present
    if [[ ! -f "CMakeLists.txt" ]]; then
        error "CMakeLists.txt not found. This script must be run from the project root."
    fi
    
    success "Build directories ready"
}

# Main setup function
main() {
    echo "BrightSign YOLO Object Detection - Setup Script"
    echo "==============================================="
    echo "This script will:"
    echo "1. Check prerequisites"
    echo "2. Setup Docker build environment"
    echo "3. Download/update RKNN toolkit"
    echo "4. Prepare build directories"
    echo ""
    echo "Building for BrightSign OS version: ${BRIGHTSIGN_OS_VERSION}"
    echo ""
    
    # Confirm execution if AUTO_YES is not set
    if [[ "$AUTO_YES" != true ]]; then
        read -p "Continue? [y/N] " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Setup cancelled."
            exit 0
        fi
    else
        log "Automatic mode: skipping confirmation prompt"
    fi
    
    start_time=$(date +%s)
    
    check_prerequisites
    download_sdk
    setup_docker
    clone_rknn_toolkit
    setup_build_directories
    
    end_time=$(date +%s)
    duration=$((end_time - start_time))
    
    echo ""
    success "Setup completed successfully in $(($duration / 60))m $(($duration % 60))s"
    echo ""
    echo "Next steps:"
    echo "1. Run './build' to compile for all platforms"
    echo "2. Run './build XT5' to compile for specific platform"
    echo "3. Find compiled binaries in build_<platform>/ directories"
    echo ""
    echo "Environment variables set:"
    echo "export BRIGHTSIGN_OS_VERSION=${BRIGHTSIGN_OS_VERSION}"
    echo "export PROJECT_ROOT=$(pwd)"
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi