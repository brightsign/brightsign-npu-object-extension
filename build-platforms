#!/bin/bash

# BrightSign YOLO Object Detection - Build Script  
# Cross-compiles the application for BrightSign platforms

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Default values
TARGET=""
CLEAN=false
QUIET=false
VERBOSE=false
EXTRACT_SDK=false
ALL_PLATFORMS=true
BRIGHTSIGN_OS_VERSION=${BRIGHTSIGN_OS_VERSION:-9.1.52}

# Platform configurations
declare -A PLATFORMS=(
    ["XT5"]="RK3588"
    ["LS5"]="RK3568" 
    ["Firebird"]="RK3576"
)

usage() {
    echo "Usage: $0 [OPTIONS] [PLATFORM]"
    echo "Build BrightSign YOLO Object Detection application"
    echo ""
    echo "Arguments:"
    echo "  PLATFORM              Target platform: XT5, LS5, Firebird (default: all)"
    echo ""
    echo "Options:"
    echo "  -c, --clean           Clean build artifacts before building"
    echo "  --extract-sdk         Extract SDK after successful build"
    echo "  -q, --quiet           Use quieter build output"
    echo "  -v, --verbose         Enable verbose output"
    echo "  -h, --help            Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                    # Build for all platforms"
    echo "  $0 XT5                # Build only for XT5/RK3588"
    echo "  $0 --clean LS5        # Clean build for LS5/RK3568"
    echo "  $0 --extract-sdk      # Build all and extract SDK"
    echo ""
    echo "Note: Requires Docker image 'yolo-build' (create with ./setup)"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--clean)
            CLEAN=true
            shift
            ;;
        --extract-sdk)
            EXTRACT_SDK=true
            shift
            ;;
        -q|--quiet)
            QUIET=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
        *)
            if [ -z "$TARGET" ]; then
                TARGET="$1"
                ALL_PLATFORMS=false
            else
                echo "Multiple targets specified. Only one target allowed."
                usage
                exit 1
            fi
            shift
            ;;
    esac
done

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    if [ "$QUIET" != true ]; then
        echo -e "${BLUE}[BUILD] $1${NC}"
    fi
}

warn() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

error() {
    echo -e "${RED}❌ $1${NC}"
    exit 1
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# Check if Docker image exists
check_docker_image() {
    if ! docker images | grep -q "^yolo-build "; then
        error "Docker image 'yolo-build' not found. Please run './setup' first."
    fi
}

# Build for a specific platform
build_platform() {
    local platform=$1
    local soc=${PLATFORMS[$platform]}
    local build_dir="build_${platform,,}"
    
    if [ -z "$soc" ]; then
        error "Unknown platform: $platform"
    fi
    
    log "Building for $platform (SOC: $soc)..."
    
    # Clean if requested
    if [ "$CLEAN" = true ]; then
        log "Cleaning $build_dir..."
        rm -rf "$build_dir"
        mkdir -p "$build_dir"
    fi
    
    # Ensure build directory exists
    mkdir -p "$build_dir"
    
    # Prepare Docker command
    local docker_cmd="docker run --rm"
    docker_cmd="$docker_cmd -v ${SCRIPT_DIR}:/workspace"
    docker_cmd="$docker_cmd -v ${SCRIPT_DIR}/srv:/srv"
    docker_cmd="$docker_cmd -w /workspace"
    docker_cmd="$docker_cmd -e SOC_TYPE=$soc"
    docker_cmd="$docker_cmd -e BUILD_DIR=$build_dir"
    docker_cmd="$docker_cmd yolo-build"
    
    # Build command inside container
    local build_cmd="cd $build_dir && "
    build_cmd="$build_cmd cmake -DCMAKE_TOOLCHAIN_FILE=/opt/sdk/sysroots/x86_64-oesdk-linux/usr/share/cmake/OEToolchainConfig.cmake"
    build_cmd="$build_cmd -DCMAKE_BUILD_TYPE=Release"
    build_cmd="$build_cmd -DTARGET_SOC=$soc"
    
    # Add verbose flag if requested
    if [ "$VERBOSE" = true ]; then
        build_cmd="$build_cmd -DCMAKE_VERBOSE_MAKEFILE=ON"
    fi
    
    build_cmd="$build_cmd .. && make -j$(nproc)"
    
    # Execute build
    if [ "$QUIET" = true ]; then
        eval "$docker_cmd bash -c \"$build_cmd\" > /dev/null 2>&1" || error "Build failed for $platform"
    else
        eval "$docker_cmd bash -c \"$build_cmd\"" || error "Build failed for $platform"
    fi
    
    # Copy model files if they exist
    if [ -d "model" ]; then
        log "Copying model files to $build_dir..."
        cp -r model "$build_dir/" 2>/dev/null || true
    fi
    
    # Check if build succeeded
    if [ -f "$build_dir/yolo_demo" ]; then
        success "$platform build completed successfully"
        
        # List build artifacts
        if [ "$VERBOSE" = true ]; then
            echo "Build artifacts:"
            ls -la "$build_dir/yolo_demo"
            ls -la "$build_dir/"*.so 2>/dev/null || true
        fi
    else
        error "Build failed - yolo_demo not found in $build_dir"
    fi
}

# Extract SDK if requested
extract_sdk() {
    log "Extracting SDK..."
    
    # The SDK extraction would typically happen here
    # For now, we'll copy the SDK installer if it exists
    if [ -f "brightsign-x86_64-cobra-toolchain-${BRIGHTSIGN_OS_VERSION}.sh" ]; then
        cp "brightsign-x86_64-cobra-toolchain-${BRIGHTSIGN_OS_VERSION}.sh" srv/
        success "SDK installer copied to srv/"
    else
        warn "SDK installer not found. SDK extraction requires a full BitBake build."
    fi
}

# Main build function
main() {
    echo "BrightSign YOLO Object Detection - Build Script"
    echo "==============================================="
    
    start_time=$(date +%s)
    
    check_docker_image
    
    # Determine which platforms to build
    if [ "$ALL_PLATFORMS" = true ]; then
        log "Building for all platforms..."
        for platform in "${!PLATFORMS[@]}"; do
            build_platform "$platform"
            echo ""
        done
    else
        if [ -z "$TARGET" ]; then
            error "No target platform specified"
        fi
        build_platform "$TARGET"
    fi
    
    # Extract SDK if requested
    if [ "$EXTRACT_SDK" = true ]; then
        extract_sdk
    fi
    
    end_time=$(date +%s)
    duration=$((end_time - start_time))
    
    echo ""
    success "Build completed in $(($duration / 60))m $(($duration % 60))s"
    
    echo ""
    echo "Build artifacts:"
    for platform in "${!PLATFORMS[@]}"; do
        local build_dir="build_${platform,,}"
        if [ -f "$build_dir/yolo_demo" ]; then
            echo "  ✓ $platform: $build_dir/yolo_demo"
        fi
    done
    
    echo ""
    echo "Next steps:"
    echo "1. Test locally: ./build_xt5/yolo_demo /path/to/image.jpg"
    echo "2. Package for deployment (use existing packaging scripts)"
    echo "3. Deploy to BrightSign player"
}

# Run main function if script is executed directly  
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi