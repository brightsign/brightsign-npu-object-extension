#!/bin/bash

# BrightSign YOLO Object Detection - Model Compilation Script
# Compiles ONNX models to RKNN format using rknn_tk2 Docker container

set -e

# Check if running as root, which can cause permission issues.
if [ "$(id -u)" -eq 0 ]; then
    echo "Error: This script must not be run as root. Please run as a regular user."
    exit 1
fi

# get the directory of this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Default values
PLATFORM=""
MODEL=""
CLEAN=false
QUIET=false
VERBOSE=false
BUILD_CONTAINER=false

# Platform configurations
declare -A PLATFORMS=(
    ["XT5"]="rk3588"
    ["LS5"]="rk3568"
    ["Firebird"]="rk3576"
)

# Model configurations
declare -A MODELS=(
    ["yolov8"]="yolov8n.onnx"
    ["yolox"]="yolox_s.onnx"
)

usage() {
    echo "Usage: $0 [OPTIONS] [PLATFORM] [MODEL]"
    echo "Compile ONNX models to RKNN format for BrightSign players"
    echo ""
    echo "Arguments:"
    echo "  PLATFORM            Target platform: XT5, LS5, Firebird (default: all)"
    echo "  MODEL               Model to compile: yolov8, yolox (default: all)"
    echo ""
    echo "Options:"
    echo "  -c, --clean         Clean model directories before compilation"
    echo "  -q, --quiet         Use quieter build output"
    echo "  -v, --verbose       Enable verbose output"
    echo "  --build-container   Build rknn_tk2 Docker container first"
    echo "  -h, --help          Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                      # Compile all models for all platforms"
    echo "  $0 XT5                  # Compile all models for XT5/RK3588"
    echo "  $0 XT5 yolov8           # Compile YOLOv8 for XT5/RK3588"
    echo "  $0 --clean LS5 yolox    # Clean and compile YOLOX for LS5/RK3568"
    echo "  $0 --build-container    # Build Docker container first"
    echo ""
    echo "Prerequisites:"
    echo "  1. Run './setup' to clone RKNN toolkit and model zoo"
    echo "  2. Ensure toolkit/rknn_model_zoo directory exists"
    echo ""
    echo "Platform mappings:"
    echo "  XT5      -> RK3588 (flagship players)"
    echo "  LS5      -> RK3568 (standard players)"
    echo "  Firebird -> RK3576 (next-gen players)"
    echo ""
    echo "Model mappings:"
    echo "  yolov8   -> YOLOv8n (simplified YOLO)"
    echo "  yolox    -> YOLOX-s (extended YOLO)"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--clean)
            CLEAN=true
            shift
            ;;
        -q|--quiet)
            QUIET=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        --build-container)
            BUILD_CONTAINER=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
        *)
            if [ -z "$PLATFORM" ]; then
                if [ -n "${PLATFORMS[$1]}" ]; then
                    PLATFORM="$1"
                elif [ -n "${MODELS[$1]}" ]; then
                    MODEL="$1"
                else
                    echo "Unknown platform or model: $1"
                    echo "Valid platforms: ${!PLATFORMS[@]}"
                    echo "Valid models: ${!MODELS[@]}"
                    exit 1
                fi
            elif [ -z "$MODEL" ]; then
                if [ -n "${MODELS[$1]}" ]; then
                    MODEL="$1"
                else
                    echo "Unknown model: $1"
                    echo "Valid models: ${!MODELS[@]}"
                    exit 1
                fi
            else
                echo "Too many arguments specified."
                usage
                exit 1
            fi
            shift
            ;;
    esac
done

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    if [ "$QUIET" != true ]; then
        echo -e "${BLUE}[COMPILE-MODELS] $1${NC}"
    fi
}

warn() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

error() {
    echo -e "${RED}❌ $1${NC}"
    exit 1
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# Check prerequisites
check_prerequisites() {
    log "Checking prerequisites..."
    
    # Check if Docker is available
    if ! command -v docker &> /dev/null; then
        error "Docker is required but not installed. Please install Docker first."
    fi
    
    # Check if Docker daemon is running
    if ! docker info &> /dev/null; then
        error "Docker daemon is not running. Please start Docker."
    fi
    
    # Check if toolkit directory exists
    if [ ! -d "toolkit/rknn_model_zoo" ]; then
        error "RKNN model zoo not found. Please run './setup' first to clone the toolkit."
    fi
    
    # Check if required ONNX models exist
    if [ ! -f "toolkit/rknn_model_zoo/examples/yolov8/model/yolov8n.onnx" ]; then
        error "YOLOv8 ONNX model not found at toolkit/rknn_model_zoo/examples/yolov8/model/yolov8n.onnx"
    fi
    
    if [ ! -f "toolkit/rknn_model_zoo/examples/yolox/model/yolox_s.onnx" ]; then
        error "YOLOX ONNX model not found at toolkit/rknn_model_zoo/examples/yolox/model/yolox_s.onnx"
    fi
    
    success "Prerequisites check passed"
}

# Build rknn_tk2 Docker container
build_container() {
    log "Building rknn_tk2 Docker container..."
    
    cd toolkit/rknn-toolkit2/docker
    
    # Use the provided build script
    if [ -f "build.sh" ]; then
        ./build.sh || error "Failed to build rknn_tk2 container"
    else
        error "build.sh not found in toolkit/rknn-toolkit2/docker"
    fi
    
    cd "${SCRIPT_DIR}"
    success "rknn_tk2 Docker container built successfully"
}

# Compile model for specific platform and model type
compile_model() {
    local platform=$1
    local model_type=$2
    local soc=${PLATFORMS[$platform]}
    local model_file=${MODELS[$model_type]}
    
    log "Compiling $model_type for $platform (SOC: $soc)..."
    
    # Change to model zoo directory
    cd toolkit/rknn_model_zoo
    
    # Create output directories
    mkdir -p "examples/${model_type}/model/${soc^^}"
    
    # Clean if requested
    if [ "$CLEAN" = true ]; then
        log "Cleaning ${model_type} model directory for ${soc^^}..."
        rm -rf "examples/${model_type}/model/${soc^^}"/*
    fi
    
    # Run Docker compilation
    # Check if we have a TTY available and not in quiet mode
    local docker_flags="--rm"
    if [ -t 0 ] && [ "$QUIET" != true ]; then
        docker_flags="-it --rm"
    fi
    
    local docker_cmd="docker run ${docker_flags} -v \$(pwd):/zoo rknn_tk2 /bin/bash -c \"cd /zoo/examples/${model_type}/python && python convert.py ../model/${model_file} ${soc} i8 ../model/${soc^^}/${model_file%.onnx}.rknn\""
    
    if [ "$QUIET" = true ]; then
        eval "$docker_cmd > /dev/null 2>&1" || error "Failed to compile $model_type for $platform"
    else
        eval "$docker_cmd" || error "Failed to compile $model_type for $platform"
    fi
    
    # Check if compilation succeeded
    if [ -f "examples/${model_type}/model/${soc^^}/${model_file%.onnx}.rknn" ]; then
        success "$model_type compiled successfully for $platform"
    else
        error "Compilation failed - ${model_file%.onnx}.rknn not found"
    fi
    
    cd "${SCRIPT_DIR}"
}

# Copy models and labels to install directories
copy_models() {
    log "Copying compiled models to install directories..."
    
    cd toolkit/rknn_model_zoo
    
    for platform in "${!PLATFORMS[@]}"; do
        local soc=${PLATFORMS[$platform]}
        local soc_upper=${soc^^}
        
        # Create install directory
        mkdir -p "../../install/${soc_upper}/model"
        
        # Copy models if they exist
        if [ -f "examples/yolov8/model/${soc_upper}/yolov8n.rknn" ]; then
            cp "examples/yolov8/model/${soc_upper}/yolov8n.rknn" "../../install/${soc_upper}/model/"
        fi
        
        if [ -f "examples/yolox/model/${soc_upper}/yolox_s.rknn" ]; then
            cp "examples/yolox/model/${soc_upper}/yolox_s.rknn" "../../install/${soc_upper}/model/"
        fi
        
        # Copy labels (both models use COCO labels) and convert spaces to underscores
        if [ -f "examples/yolov8/model/coco_80_labels_list.txt" ]; then
            sed 's/ /_/g' "examples/yolov8/model/coco_80_labels_list.txt" > "../../install/${soc_upper}/model/coco_80_labels_list.txt"
        fi
    done
    
    cd "${SCRIPT_DIR}"
    success "Models and labels copied to install directories"
}

# Main compilation function
main() {
    echo "BrightSign YOLO Object Detection - Model Compilation"
    echo "==================================================="
    
    start_time=$(date +%s)
    
    check_prerequisites
    
    # Build container if requested
    if [ "$BUILD_CONTAINER" = true ]; then
        build_container
    fi
    
    # Check if rknn_tk2 container exists
    if ! docker images | grep -q "^rknn_tk2 "; then
        error "rknn_tk2 Docker image not found. Please run './setup' first to build the container."
    fi
    
    # Determine which platforms and models to compile
    if [ -n "$PLATFORM" ] && [ -n "$MODEL" ]; then
        log "Compiling $MODEL for $PLATFORM..."
        compile_model "$PLATFORM" "$MODEL"
    elif [ -n "$PLATFORM" ]; then
        log "Compiling all models for $PLATFORM..."
        for model in "${!MODELS[@]}"; do
            compile_model "$PLATFORM" "$model"
        done
    elif [ -n "$MODEL" ]; then
        log "Compiling $MODEL for all platforms..."
        for platform in "${!PLATFORMS[@]}"; do
            compile_model "$platform" "$MODEL"
        done
    else
        log "Compiling all models for all platforms..."
        for platform in "${!PLATFORMS[@]}"; do
            for model in "${!MODELS[@]}"; do
                compile_model "$platform" "$model"
            done
        done
    fi
    
    # Copy models to install directories
    copy_models
    
    end_time=$(date +%s)
    duration=$((end_time - start_time))
    
    echo ""
    success "Model compilation completed in $(($duration / 60))m $(($duration % 60))s"
    
    echo ""
    echo "Compiled models:"
    for platform in "${!PLATFORMS[@]}"; do
        local soc=${PLATFORMS[$platform]}
        local soc_upper=${soc^^}
        local install_dir="install/${soc_upper}/model"
        
        if [ -d "$install_dir" ]; then
            echo "  $platform (${soc_upper}):"
            if [ -f "$install_dir/yolov8n.rknn" ]; then
                echo "    ✓ YOLOv8: $install_dir/yolov8n.rknn"
            fi
            if [ -f "$install_dir/yolox_s.rknn" ]; then
                echo "    ✓ YOLOX: $install_dir/yolox_s.rknn"
            fi
            if [ -f "$install_dir/coco_80_labels_list.txt" ]; then
                echo "    ✓ Labels: $install_dir/coco_80_labels_list.txt"
            fi
        fi
    done
    
    echo ""
    echo "Next steps:"
    echo "1. Build C++ applications: ./build-apps"
    echo "2. Test locally with compiled models"
    echo "3. Deploy to BrightSign players"
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi