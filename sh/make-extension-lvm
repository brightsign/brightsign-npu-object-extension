#!/bin/bash
set -e

name=npu_yolo
mapper_vol_name=ext_${name}
tmp_vol_name=tmp_${name}
mount_name=ext_${name}

workdir=../extension-${name}-temp/

if ! echo "${name}" | egrep -q '^[a-z][a-z0-9_]{2,12}$'; then
    echo "Error: Invalid extension name specified" 1>&2
    exit 1
fi

rm -rf "${workdir}"
mkdir -p "${workdir}"

# now=`date`
# cat <<EOF >${workdir}bsext_init
# #!/bin/sh
# echo
# echo "EXTENSION ${name} INIT built ${now} \$@"
# echo -n "Now is: "; date
# echo
# EOF

cp -r * ${workdir}

chmod +x ${workdir}bsext_init
rm -f ext_${name}.squashfs
mksquashfs ${workdir} ext_${name}.squashfs

# Now generate the install script

bsfw_write_extension_lvm() {
    file="$1"
    vol="$2"

    image_size="`stat --dereference --format=%s ${file}`"
    volume_size=$((${image_size} + 4096))
    sha256="`sha256sum ${file} | cut -c-64`"

    if [ "${image_size}" -eq 0 ]; then
        echo Image size for ${vol} would be zero
        exit 1
    fi

    if [ -z "${image_size}" ]; then
        echo Failed to determine image size for ${vol}
        exit 1
    fi

    (
        # This shouldn't be necessary when this install script is
        # incorporated into a standard BrightSign upgrade script but
        # can be useful during development.
        echo "echo \"Trying to unmount ${name} volume\""
        echo "if [ -d '/var/volatile/bsext/${mount_name}' ]; then"
        echo "    umount /var/volatile/bsext/${mount_name}"
        echo "    rmdir /var/volatile/bsext/${mount_name}"
        echo "fi"

        # Remove dm-verity mapping such that LVM volume can be removed
        echo "if [ -b '/dev/mapper/bsos-${mapper_vol_name}-verified' ]; then"
        echo "    veritysetup close 'bsos-${mapper_vol_name}-verified'"
        echo "fi"

        # Remove old volume. It might be the wrong size
        echo "if [ -b '/dev/mapper/bsos-${mapper_vol_name}' ]; then"
        echo "    lvremove --yes '/dev/mapper/bsos-${mapper_vol_name}'"
        echo "    rm -f '/dev/mapper/bsos-${mapper_vol_name}'"
        echo "fi"

        # Remove a temporary volume if it happens to be lying around
        echo "if [ -b '/dev/mapper/bsos-${tmp_vol_name}' ]; then"
        echo "    lvremove --yes '/dev/mapper/bsos-${tmp_vol_name}'"
        echo "    rm -f '/dev/mapper/bsos-${tmp_vol_name}'"
        echo "fi"

        # Create a new volume.
        echo "lvcreate --yes --size ${volume_size}b -n '${tmp_vol_name}' bsos"

        echo "echo Writing image to ${tmp_vol_name} volume..."
        echo "(cat "${file}" && dd if=/dev/zero bs=4096 count=1) > /dev/mapper/bsos-${tmp_vol_name}"

        # Verify that the image was written properly by reading it
        # back and calculating its SHA256.

        image_size_pages=$((${image_size}/4096))
        echo "check=\"\`dd 'if=/dev/mapper/bsos-${tmp_vol_name}' bs=4096 count=${image_size_pages}|sha256sum|cut -c-64\`\""

        echo "if [ \"\${check}\" != \"${sha256}\" ]; then"
        echo "    echo \"VERIFY FAILURE for ${tmp_vol_name} volume\""
        echo "    lvremove --yes '/dev/mapper/bsos-${tmp_vol_name}' || true"
        echo "    exit 4"
        echo "fi"

        # Now we know that the volume is correct we can rename it so
        # it can be used.
        echo "lvrename bsos '${tmp_vol_name}' '${mapper_vol_name}'"
    )
}

install_script="ext_${name}_install-lvm.sh"

(
    echo "#!/bin/sh"
    echo "# Enhanced install script with pre-installation validation"
    echo "set -e"
    echo ""
    echo "# Enhanced pre-installation validation for Phase 3"
    echo "validate_pre_install() {"
    echo "    echo \"üîç Running enhanced pre-installation validation...\""
    echo "    local validation_errors=0"
    echo "    "
    echo "    # Check if manifest.json exists in current directory"
    echo "    if [ -f 'manifest.json' ]; then"
    echo "        echo \"üìã Found manifest.json, performing validation...\""
    echo "        "
    echo "        # Basic validation using jq if available"
    echo "        if command -v jq >/dev/null 2>&1; then"
    echo "            # Validate JSON syntax first"
    echo "            if ! jq empty manifest.json 2>/dev/null; then"
    echo "                echo \"‚ùå Error: manifest.json contains invalid JSON syntax\""
    echo "                validation_errors=\$((validation_errors + 1))"
    echo "            fi"
    echo "            "
    echo "            # Check manifest version"
    echo "            local manifest_version=\$(jq -r '.manifestVersion // 0' manifest.json 2>/dev/null)"
    echo "            if [ \"\$manifest_version\" != \"1\" ]; then"
    echo "                echo \"‚ö†Ô∏è  Warning: Unknown manifest version: \$manifest_version\""
    echo "            fi"
    echo "            "
    echo "            # Enhanced OS compatibility checking"
    echo "            local min_os=\$(jq -r '.compatibility.osVersion.min // \"0.0.0\"' manifest.json 2>/dev/null)"
    echo "            local max_os=\$(jq -r '.compatibility.osVersion.max // null' manifest.json 2>/dev/null)"
    echo "            if [ -f /etc/os-release ]; then"
    echo "                local current_os=\$(grep VERSION_ID /etc/os-release | cut -d= -f2 | tr -d '\"')"
    echo "                echo \"üìä OS version: \$current_os (minimum required: \$min_os)\""
    echo "                "
    echo "                # Basic version comparison (simplified)"
    echo "                if [ \"\$min_os\" != \"0.0.0\" ]; then"
    echo "                    echo \"üìã Minimum OS version check: \$current_os >= \$min_os\""
    echo "                fi"
    echo "                if [ \"\$max_os\" != \"null\" ] && [ -n \"\$max_os\" ]; then"
    echo "                    echo \"üìã Maximum OS version declared: \$max_os\""
    echo "                fi"
    echo "            fi"
    echo "            "
    echo "            # Enhanced storage requirements validation"
    echo "            local install_storage=\$(jq -r '.requirements.storage.installation // null' manifest.json 2>/dev/null)"
    echo "            if [ \"\$install_storage\" != \"null\" ] && [ -n \"\$install_storage\" ]; then"
    echo "                local available_space_kb=\$(df /usr/local 2>/dev/null | tail -1 | awk '{print \$4}')"
    echo "                if [ -n \"\$available_space_kb\" ]; then"
    echo "                    local available_mb=\$((available_space_kb / 1024))"
    echo "                    echo \"üíæ Storage: \${available_mb}MB available (required: \$install_storage)\""
    echo "                    "
    echo "                    # Parse required storage and check if sufficient"
    echo "                    local required_num=\$(echo \"\$install_storage\" | sed 's/[^0-9]//g')"
    echo "                    local required_unit=\$(echo \"\$install_storage\" | sed 's/[0-9]//g')"
    echo "                    local required_mb=\"\$required_num\""
    echo "                    "
    echo "                    case \"\$required_unit\" in"
    echo "                        GB) required_mb=\$((required_num * 1024)) ;;"
    echo "                        KB) required_mb=\$((required_num / 1024)) ;;"
    echo "                    esac"
    echo "                    "
    echo "                    if [ \"\$available_mb\" -lt \"\$required_mb\" ]; then"
    echo "                        echo \"‚ùå Error: Insufficient storage space (need \${required_mb}MB, have \${available_mb}MB)\""
    echo "                        validation_errors=\$((validation_errors + 1))"
    echo "                    else"
    echo "                        echo \"‚úÖ Storage requirement satisfied\""
    echo "                    fi"
    echo "                fi"
    echo "            fi"
    echo "            "
    echo "            # Check hardware capabilities"
    echo "            local capabilities=\$(jq -r '.requirements.capabilities[]? // empty' manifest.json 2>/dev/null)"
    echo "            if [ -n \"\$capabilities\" ]; then"
    echo "                echo \"üîß Checking hardware capabilities...\""
    echo "                while IFS= read -r capability; do"
    echo "                    case \"\$capability\" in"
    echo "                        \"camera.usb\")"
    echo "                            if ls /dev/video* >/dev/null 2>&1; then"
    echo "                                echo \"‚úÖ USB camera capability: Available\""
    echo "                            else"
    echo "                                echo \"‚ö†Ô∏è  Warning: No video devices found for camera.usb capability\""
    echo "                            fi"
    echo "                            ;;"
    echo "                        \"npu.rockchip\")"
    echo "                            if [ -f /sys/firmware/devicetree/base/compatible ] && strings /sys/firmware/devicetree/base/compatible | grep -q rockchip; then"
    echo "                                echo \"‚úÖ NPU capability: Rockchip SoC detected\""
    echo "                            else"
    echo "                                echo \"‚ö†Ô∏è  Warning: Rockchip SoC not detected for npu.rockchip capability\""
    echo "                            fi"
    echo "                            ;;"
    echo "                        *)"
    echo "                            echo \"‚ÑπÔ∏è  Capability '\$capability' - skipping validation\""
    echo "                            ;;"
    echo "                    esac"
    echo "                done <<< \"\$capabilities\""
    echo "            fi"
    echo "            "
    echo "            # Check for previous installation"
    echo "            local ext_id=\$(jq -r '.extension.id // \"unknown\"' manifest.json 2>/dev/null)"
    echo "            if [ -b \"/dev/mapper/bsos-ext_npu_yolo\" ]; then"
    echo "                echo \"üì¶ Previous installation detected - will be replaced\""
    echo "            fi"
    echo "            "
    echo "        else"
    echo "            echo \"‚ÑπÔ∏è  jq not available, skipping detailed manifest validation\""
    echo "        fi"
    echo "    else"
    echo "        echo \"‚ÑπÔ∏è  No manifest.json found, skipping pre-installation validation\""
    echo "    fi"
    echo "    "
    echo "    # Final validation summary"
    echo "    if [ \"\$validation_errors\" -eq 0 ]; then"
    echo "        echo \"‚úÖ Pre-installation validation passed (\$validation_errors errors)\""
    echo "        return 0"
    echo "    else"
    echo "        echo \"‚ùå Pre-installation validation failed with \$validation_errors errors\""
    echo "        echo \"üõë Installation aborted due to validation failures\""
    echo "        echo \"üí° Please resolve the issues above and try again\""
    echo "        return 1"
    echo "    fi"
    echo "    echo \"\""
    echo "}"
    echo ""
    echo "# Run pre-installation validation and exit on failure"
    echo "if ! validate_pre_install; then"
    echo "    echo \"‚ùå Installation aborted due to validation failures\""
    echo "    exit 1"
    echo "fi"
    echo ""
    echo "# Proceed with installation"
    echo "echo \"üöÄ Starting extension installation...\""
    bsfw_write_extension_lvm ext_${name}.squashfs
    echo ""
    echo "echo \"‚úÖ Extension installation completed successfully!\""
    echo "echo \"üìñ Run 'bsext_init --help' for usage information\""
) > ${install_script}
chmod +x ${install_script}

rm -rf ${workdir}
echo
echo "Extension ${name} squashfs: ext_${name}.squashfs"
echo "Development install script: ${install_script}"
