#!/bin/bash

# BrightSign YOLO Object Detection - Package Creation Script
# Creates both development and extension packages with multi-SOC support

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Cleanup on exit
cleanup_on_exit() {
    local exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        echo ""
        warn "Script failed with exit code $exit_code"
        warn "Staging directory preserved for debugging: staging/"
    fi
}

# Set trap for cleanup on script exit
trap cleanup_on_exit EXIT

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[PACKAGE] $1${NC}"
}

warn() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

error() {
    echo -e "${RED}❌ $1${NC}"
    exit 1
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# Configuration
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
DEVELOPMENT_PACKAGE="yolo-dev-${TIMESTAMP}.zip"
EXTENSION_PACKAGE="yolo-ext-${TIMESTAMP}.zip"

# Supported SOCs and their mappings
declare -A SOC_PLATFORMS=(
    ["RK3588"]="XT5"
    ["RK3576"]="Firebird" 
    ["RK3568"]="LS5"
)

usage() {
    echo "Usage: $0 [OPTIONS]"
    echo "Package BrightSign YOLO Object Detection extension for deployment"
    echo ""
    echo "Options:"
    echo "  -d, --dev-only     Create development package only"
    echo "  -e, --ext-only     Create extension package only"
    echo "  -c, --clean        Clean install directory before packaging"
    echo "  -v, --verify       Run validation after packaging"
    echo "  --soc SOC          Package specific SOC only (RK3588, RK3576, RK3568)"
    echo "  --model MODEL      Include specific model only (yolov8, yolox, all)"
    echo "  -h, --help         Show this help message"
    echo ""
    echo "Package types:"
    echo "  Development: For /usr/local deployment (volatile, testing)"
    echo "  Extension:   For permanent installation (production)"
    echo ""
    echo "SOC Support:"
    echo "  RK3588  -> XT-5 players (XT1145, XT2145)"
    echo "  RK3576  -> Firebird development boards"
    echo "  RK3568  -> LS-5 players (LS445)"
    echo ""
    echo "Model Support:"
    echo "  yolov8  -> YOLOv8 nano model (YOLO Simplified)"
    echo "  yolox   -> YOLOX small model"
    echo "  all     -> Both models (default)"
}

# Parse command line arguments
DEV_ONLY=false
EXT_ONLY=false
CLEAN=false
VERIFY=false
SPECIFIC_SOC=""
SPECIFIC_MODEL="all"

while [[ $# -gt 0 ]]; do
    case $1 in
        -d|--dev-only)
            DEV_ONLY=true
            shift
            ;;
        -e|--ext-only)
            EXT_ONLY=true
            shift
            ;;
        -c|--clean)
            CLEAN=true
            shift
            ;;
        -v|--verify)
            VERIFY=true
            shift
            ;;
        --soc)
            SPECIFIC_SOC="$2"
            if [[ ! "${SPECIFIC_SOC}" =~ ^(RK3588|RK3576|RK3568)$ ]]; then
                error "Invalid SOC: $SPECIFIC_SOC. Must be RK3588, RK3576, or RK3568"
            fi
            shift 2
            ;;
        --model)
            SPECIFIC_MODEL="$2"
            if [[ ! "${SPECIFIC_MODEL}" =~ ^(yolov8|yolox|all)$ ]]; then
                error "Invalid model: $SPECIFIC_MODEL. Must be yolov8, yolox, or all"
            fi
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Check prerequisites
check_prerequisites() {
    log "Checking prerequisites..."

    # Check for compiled binaries
    local found_binaries=false
    for soc in "${!SOC_PLATFORMS[@]}"; do
        if [[ -n "$SPECIFIC_SOC" && "$SPECIFIC_SOC" != "$soc" ]]; then
            continue
        fi
        
        local build_dir="build_${SOC_PLATFORMS[$soc],,}"
        if [[ -f "$build_dir/yolo_demo" ]]; then
            found_binaries=true
            break
        fi
    done

    if [[ "$found_binaries" != "true" ]]; then
        error "No compiled binaries found. Please run './build-apps' first."
    fi

    # Check for compiled models
    local found_models=false
    for soc in "${!SOC_PLATFORMS[@]}"; do
        if [[ -n "$SPECIFIC_SOC" && "$SPECIFIC_SOC" != "$soc" ]]; then
            continue
        fi
        
        local install_dir="install/$soc"
        if [[ -d "$install_dir/model" ]]; then
            if [[ "$SPECIFIC_MODEL" == "all" || "$SPECIFIC_MODEL" == "yolov8" ]] && [[ -f "$install_dir/model/yolov8n.rknn" ]]; then
                found_models=true
                break
            fi
            if [[ "$SPECIFIC_MODEL" == "all" || "$SPECIFIC_MODEL" == "yolox" ]] && [[ -f "$install_dir/model/yolox_s.rknn" ]]; then
                found_models=true
                break
            fi
        fi
    done

    if [[ "$found_models" != "true" ]]; then
        error "No compiled models found. Please run './compile-models' first."
    fi

    # Check for required scripts
    if [[ ! -f "sh/make-extension-lvm" ]]; then
        error "make-extension-lvm script not found"
    fi

    if [[ ! -f "bsext_init" ]]; then
        error "bsext_init script not found"
    fi

    success "Prerequisites check passed"
}

# Create package directory structure
create_package_structure() {
    log "Creating package structure..."

    if [[ "$CLEAN" == "true" ]]; then
        log "Cleaning existing staging directory..."
        rm -rf staging
    fi

    # Create base package structure
    mkdir -p staging

    # Create SOC-specific directories
    for soc in "${!SOC_PLATFORMS[@]}"; do
        if [[ -n "$SPECIFIC_SOC" && "$SPECIFIC_SOC" != "$soc" ]]; then
            continue
        fi
        
        local platform="${SOC_PLATFORMS[$soc]}"
        log "Creating directory structure for $soc ($platform)..."
        mkdir -p "staging/$soc"
    done

    success "Package structure created"
}

# Copy binaries and libraries for each SOC
copy_binaries() {
    log "Copying compiled binaries and libraries..."

    for soc in "${!SOC_PLATFORMS[@]}"; do
        if [[ -n "$SPECIFIC_SOC" && "$SPECIFIC_SOC" != "$soc" ]]; then
            continue
        fi
        
        local platform="${SOC_PLATFORMS[$soc]}"
        local build_dir="build_${platform,,}"
        local package_soc_dir="staging/$soc"
        
        log "Copying $soc ($platform) binaries from $build_dir..."
        
        if [[ ! -d "$build_dir" ]]; then
            warn "Build directory $build_dir not found, skipping $soc"
            continue
        fi

        # Copy main binary
        if [[ -f "$build_dir/yolo_demo" ]]; then
            cp "$build_dir/yolo_demo" "$package_soc_dir/"
            chmod +x "$package_soc_dir/yolo_demo"
        else
            warn "Binary not found in $build_dir, skipping $soc"
            continue
        fi

        # Copy libraries
        mkdir -p "$package_soc_dir/lib"
        
        # Copy shared libraries from build directory
        for lib in "$build_dir"/*.so*; do
            if [[ -f "$lib" ]]; then
                cp "$lib" "$package_soc_dir/lib/"
            fi
        done

        success "$soc binaries copied"
    done
}

# Copy models for each SOC
copy_models() {
    log "Copying compiled models..."

    for soc in "${!SOC_PLATFORMS[@]}"; do
        if [[ -n "$SPECIFIC_SOC" && "$SPECIFIC_SOC" != "$soc" ]]; then
            continue
        fi
        
        local platform="${SOC_PLATFORMS[$soc]}"
        local install_dir="install/$soc"
        local package_soc_dir="staging/$soc"
        
        log "Copying $soc ($platform) models from $install_dir..."
        
        if [[ ! -d "$install_dir/model" ]]; then
            warn "Model directory $install_dir/model not found, skipping $soc models"
            continue
        fi

        mkdir -p "$package_soc_dir/model"

        # Copy models based on selection
        if [[ "$SPECIFIC_MODEL" == "all" || "$SPECIFIC_MODEL" == "yolov8" ]]; then
            if [[ -f "$install_dir/model/yolov8n.rknn" ]]; then
                cp "$install_dir/model/yolov8n.rknn" "$package_soc_dir/model/"
                log "Copied YOLOv8 model for $soc"
            fi
        fi

        if [[ "$SPECIFIC_MODEL" == "all" || "$SPECIFIC_MODEL" == "yolox" ]]; then
            if [[ -f "$install_dir/model/yolox_s.rknn" ]]; then
                cp "$install_dir/model/yolox_s.rknn" "$package_soc_dir/model/"
                log "Copied YOLOX model for $soc"
            fi
        fi

        # Always copy labels file
        if [[ -f "$install_dir/model/coco_80_labels_list.txt" ]]; then
            cp "$install_dir/model/coco_80_labels_list.txt" "$package_soc_dir/model/"
        fi

        success "$soc models copied"
    done
}

# Add extension management scripts
copy_extension_scripts() {
    log "Adding extension management scripts..."

    # Copy main bsext_init script
    cp bsext_init staging/ && chmod +x staging/bsext_init

    # Copy uninstall script
    if [[ -f "sh/uninstall.sh" ]]; then
        cp sh/uninstall.sh staging/ && chmod +x staging/uninstall.sh
    fi

    success "Extension scripts added"
}

# Verify package structure
verify_package() {
    log "Verifying package structure... in $(pwd)"
    
    local errors=0
    local total_files=0

    # Check for main scripts
    local essential_files=(
        "bsext_init"
        "uninstall.sh"
    )

    for file in "${essential_files[@]}"; do
        log "Checking file: $file"
        echo "$file: $(ls -l staging/$file 2>/dev/null || echo "File not found")"
        if [[ ! -f "staging/$file" ]]; then
            warn "Missing file: staging/$file (pwd: $(pwd))"
            errors=$((errors + 1))
        else
            log "Found file: staging/$file"
        fi
    done

    # Check SOC directories
    log "Checking SOC directories..."
    for soc in "${!SOC_PLATFORMS[@]}"; do
        if [[ -n "$SPECIFIC_SOC" && "$SPECIFIC_SOC" != "$soc" ]]; then
            continue
        fi
        
        local platform="${SOC_PLATFORMS[$soc]}"
        local soc_dir="staging/$soc"
        log "Checking SOC directory: $soc_dir"
        
        if [[ ! -d "$soc_dir" ]]; then
            warn "Missing SOC directory: $soc_dir"
            ((errors++)) || true
            continue
        fi

        # Check for binary
        if [[ ! -f "$soc_dir/yolo_demo" ]]; then
            warn "Missing binary: $soc_dir/yolo_demo"
            errors=$((errors + 1))
        else
            total_files=$((total_files + 1))
        fi

        # Check for models
        local models_found=0
        if [[ "$SPECIFIC_MODEL" == "all" || "$SPECIFIC_MODEL" == "yolov8" ]] && [[ -f "$soc_dir/model/yolov8n.rknn" ]]; then
            models_found=$((models_found + 1))
            total_files=$((total_files + 1))
        fi
        if [[ "$SPECIFIC_MODEL" == "all" || "$SPECIFIC_MODEL" == "yolox" ]] && [[ -f "$soc_dir/model/yolox_s.rknn" ]]; then
            models_found=$((models_found + 1))
            total_files=$((total_files + 1))
        fi

        if [[ $models_found -eq 0 ]]; then
            warn "No models found for $soc in $soc_dir/model/"
            errors=$((errors + 1))
        fi

        log "$soc ($platform): Binary + $models_found models"
    done
    
    log "Completed SOC directory checks"

    echo "Check errors: $errors"
    echo "Total files packaged: $total_files"
    if [[ $errors -eq 0 ]]; then
        success "Package verification passed ($total_files files packaged)"
    else
        warn "Package verification found $errors issues"
    fi

    # Show package size
    local package_size=$(du -sh staging/ 2>/dev/null | cut -f1)
    log "Package size: $package_size"
}

# Create development package
create_development_package() {
    log "Creating development package..."

    cd staging
    zip -r "../$DEVELOPMENT_PACKAGE" ./ >/dev/null
    cd ..

    local package_size=$(du -sh "$DEVELOPMENT_PACKAGE" 2>/dev/null | cut -f1)
    success "Development package created: $DEVELOPMENT_PACKAGE ($package_size)"

    echo ""
    echo "Development Package Usage:"
    echo "1. Transfer $DEVELOPMENT_PACKAGE to player via DWS"
    echo "2. On player: mkdir -p /usr/local/yolo && cd /usr/local/yolo"
    echo "3. On player: unzip /storage/sd/$DEVELOPMENT_PACKAGE"
    echo "4. On player: ./bsext_init run"
    echo "Note: Development installation is volatile (lost on reboot)"
}

# Create extension package
create_extension_package() {
    log "Creating production extension package..."

    cd staging

    # Run make-extension script
    ../sh/make-extension-lvm || error "Extension creation failed"

    # Package the extension
    zip "../$EXTENSION_PACKAGE" ext_npu_yolo* >/dev/null

    # Clean up temporary files
    rm -rf ext_npu_yolo*

    cd ..

    local package_size=$(du -sh "$EXTENSION_PACKAGE" 2>/dev/null | cut -f1)
    success "Extension package created: $EXTENSION_PACKAGE ($package_size)"

    echo ""
    echo "Extension Package Usage:"
    echo "1. Transfer $EXTENSION_PACKAGE to player via DWS"
    echo "2. On player: mkdir -p /usr/local && cd /usr/local"
    echo "3. On player: unzip /storage/sd/$EXTENSION_PACKAGE"
    echo "4. On player: bash ./ext_npu_yolo_install-lvm.sh"
    echo "5. On player: reboot"
    echo "Note: Extension installation is permanent (persists across reboots)"
}

# Cleanup staging directory
cleanup_staging() {
    if [[ -d "staging" ]]; then
        log "Cleaning up staging directory..."
        rm -rf staging
        success "Staging directory cleaned up"
    fi
}

# Run validation if requested
run_validation() {
    if [[ "$VERIFY" == "true" ]]; then
        echo ""
        log "Running validation..."
        
        # Basic validation checks
        log "Validating package contents..."
        
        # Check if bsext_init can parse without errors
        if bash -n staging/bsext_init; then
            success "bsext_init syntax validation passed"
        else
            warn "bsext_init syntax validation failed"
        fi
        
        # Check for executable permissions
        if [[ -x staging/bsext_init ]]; then
            success "bsext_init is executable"
        else
            warn "bsext_init is not executable"
        fi
    fi
}

# Main packaging function
main() {
    echo "BrightSign YOLO Object Detection - Package Creation"
    echo "=================================================="
    
    # Show configuration
    echo "Configuration:"
    echo "  SOC Filter: ${SPECIFIC_SOC:-All supported SOCs}"
    echo "  Model Filter: $SPECIFIC_MODEL"
    echo "  Package Type: $([ "$DEV_ONLY" == "true" ] && echo "Development only" || [ "$EXT_ONLY" == "true" ] && echo "Extension only" || echo "Both")"
    echo ""

    local start_time=$(date +%s)

    check_prerequisites
    echo ""

    create_package_structure
    copy_binaries
    copy_models
    copy_extension_scripts
    echo ""

    verify_package
    echo ""

    # Create packages based on options
    if [[ "$EXT_ONLY" == "true" ]]; then
        create_extension_package
    elif [[ "$DEV_ONLY" == "true" ]]; then
        create_development_package
    else
        create_development_package
        echo ""
        create_extension_package
    fi

    run_validation

    # Clean up staging directory after successful packaging
    cleanup_staging

    local end_time=$(date +%s)
    local duration=$((end_time - start_time))

    echo ""
    success "Packaging completed in $(($duration / 60))m $(($duration % 60))s"

    # Show created packages
    echo ""
    echo "Created packages:"
    if [[ "$EXT_ONLY" != "true" ]]; then
        echo "  📦 $DEVELOPMENT_PACKAGE (development/testing)"
    fi
    if [[ "$DEV_ONLY" != "true" ]]; then
        echo "  📦 $EXTENSION_PACKAGE (production)"
    fi

    # Show what was packaged
    echo ""
    echo "Package contents:"
    for soc in "${!SOC_PLATFORMS[@]}"; do
        if [[ -n "$SPECIFIC_SOC" && "$SPECIFIC_SOC" != "$soc" ]]; then
            continue
        fi
        
        local platform="${SOC_PLATFORMS[$soc]}"
        echo "  🎯 $soc ($platform): Binary + Models ($SPECIFIC_MODEL)"
    done

    echo ""
    echo "Next steps:"
    echo "1. Transfer package(s) to BrightSign player"
    echo "2. Install using instructions shown above"
    echo "3. Configure via registry if needed (classes, confidence, etc.)"
    echo "4. Test with attached USB camera"
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi