#!/bin/bash

# BrightSign YOLO Object Detection - C++ Application Build Script
# Builds the C++ application for all platforms using installed SDK

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Default values
CLEAN=false
QUIET=false
VERBOSE=false
TARGET_PLATFORM=""

# Platform configurations
declare -A PLATFORMS=(
    ["XT5"]="RK3588"
    ["LS5"]="RK3568"
    ["Firebird"]="RK3568"
)

# Note: Firebird/RK3576 support is not complete yet, using RK3568 as fallback
# declare -A PLATFORMS=(
#     ["XT5"]="RK3588"
#     ["LS5"]="RK3568" 
#     ["Firebird"]="RK3576"
# )

usage() {
    echo "Usage: $0 [OPTIONS] [PLATFORM]"
    echo "Build BrightSign YOLO Object Detection C++ application"
    echo ""
    echo "Arguments:"
    echo "  PLATFORM              Target platform: XT5, LS5, Firebird (default: all)"
    echo ""
    echo "Options:"
    echo "  -c, --clean           Clean build artifacts before building"
    echo "  -q, --quiet           Use quieter build output"
    echo "  -v, --verbose         Enable verbose output"
    echo "  -h, --help            Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                    # Build for all platforms"
    echo "  $0 XT5                # Build only for XT5/RK3588"
    echo "  $0 --clean LS5        # Clean build for LS5/RK3568"
    echo "  $0 -v                 # Build all with verbose output"
    echo ""
    echo "Prerequisites:"
    echo "  1. Run './setup' to create build environment"
    echo "  2. Run './build --extract-sdk' to build and extract SDK"
    echo "  3. Run './brightsign-x86*.sh -d ./sdk -y' to install SDK"
    echo ""
    echo "Note: Requires SDK to be installed in ./sdk directory"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--clean)
            CLEAN=true
            shift
            ;;
        -q|--quiet)
            QUIET=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
        *)
            if [ -z "$TARGET_PLATFORM" ]; then
                TARGET_PLATFORM="$1"
                if [ -z "${PLATFORMS[$TARGET_PLATFORM]}" ]; then
                    echo "Unknown platform: $TARGET_PLATFORM"
                    echo "Valid platforms: ${!PLATFORMS[@]}"
                    exit 1
                fi
            else
                echo "Multiple platforms specified. Only one platform allowed."
                usage
                exit 1
            fi
            shift
            ;;
    esac
done

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    if [ "$QUIET" != true ]; then
        echo -e "${BLUE}[BUILD-APPS] $1${NC}"
    fi
}

warn() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

error() {
    echo -e "${RED}❌ $1${NC}"
    exit 1
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# Check prerequisites
check_prerequisites() {
    log "Checking prerequisites..."
    
    # Check if SDK is installed
    if [ ! -d "sdk/sysroots" ]; then
        error "SDK not found. Please install SDK first:
  1. Run './build --extract-sdk' to build and extract SDK
  2. Run './brightsign-x86_64-*-toolchain-*.sh -d ./sdk -y' to install SDK"
    fi
    
    # Check if SDK environment setup exists
    if [ ! -f "sdk/environment-setup-aarch64-oe-linux" ]; then
        error "SDK environment setup file not found at sdk/environment-setup-aarch64-oe-linux"
    fi
    
    # Check if CMakeLists.txt exists
    if [ ! -f "CMakeLists.txt" ]; then
        error "CMakeLists.txt not found. This script must be run from the project root."
    fi
    
    success "Prerequisites check passed"
}

# Build for a specific platform
build_platform() {
    local platform=$1
    local soc=${PLATFORMS[$platform]}
    local build_dir="build_${platform,,}"
    
    if [ "$platform" = "Firebird" ] && [ "$soc" = "RK3568" ]; then
        warn "Firebird/RK3576 support incomplete, building with RK3568 configuration"
    fi
    
    log "Building for $platform (SOC: $soc)..."
    
    # Clean if requested
    if [ "$CLEAN" = true ]; then
        log "Cleaning $build_dir..."
        rm -rf "$build_dir"
    fi
    
    # Ensure build directory exists
    mkdir -p "$build_dir"
    
    # Source the SDK environment
    log "Sourcing SDK environment..."
    if ! source sdk/environment-setup-aarch64-oe-linux; then
        error "Failed to source SDK environment"
    fi
    
    # Change to build directory
    cd "$build_dir"
    
    # Run CMake
    log "Running CMake for $platform..."
    local cmake_cmd="cmake .. -DOECORE_TARGET_SYSROOT=\"\${OECORE_TARGET_SYSROOT}\" -DTARGET_SOC=$soc"
    cmake_cmd="$cmake_cmd -DCMAKE_BUILD_TYPE=Release"
    
    if [ "$VERBOSE" = true ]; then
        cmake_cmd="$cmake_cmd -DCMAKE_VERBOSE_MAKEFILE=ON"
    fi
    
    
    if [ "$QUIET" = true ]; then
        eval "$cmake_cmd > /dev/null 2>&1" || error "CMake failed for $platform"
    else
        eval "$cmake_cmd" || error "CMake failed for $platform"
    fi
    
    # Run make
    log "Running make for $platform..."
    local make_cmd="make -j$(nproc)"
    
    if [ "$QUIET" = true ]; then
        eval "$make_cmd > /dev/null 2>&1" || error "Make failed for $platform"
    else
        eval "$make_cmd" || error "Make failed for $platform"
    fi
    
    # Go back to project root
    cd ..
    
    # Copy model files if they exist
    if [ -d "model" ]; then
        log "Copying model files to $build_dir..."
        cp -r model "$build_dir/" 2>/dev/null || true
    fi
    
    # Check if build succeeded
    if [ -f "$build_dir/yolo_demo" ]; then
        success "$platform build completed successfully"
        
        # List build artifacts
        if [ "$VERBOSE" = true ]; then
            echo "Build artifacts:"
            ls -la "$build_dir/yolo_demo"
            ls -la "$build_dir/"*.so 2>/dev/null || true
        fi
    else
        error "Build failed - yolo_demo not found in $build_dir"
    fi
}

# Main build function
main() {
    echo "BrightSign YOLO Object Detection - C++ Application Build"
    echo "========================================================"
    
    start_time=$(date +%s)
    
    check_prerequisites
    
    # Determine which platforms to build
    if [ -n "$TARGET_PLATFORM" ]; then
        log "Building for $TARGET_PLATFORM..."
        build_platform "$TARGET_PLATFORM"
    else
        log "Building for all platforms..."
        for platform in "${!PLATFORMS[@]}"; do
            build_platform "$platform"
            echo ""
        done
    fi
    
    end_time=$(date +%s)
    duration=$((end_time - start_time))
    
    echo ""
    success "Build completed in $(($duration / 60))m $(($duration % 60))s"
    
    echo ""
    echo "Build artifacts:"
    for platform in "${!PLATFORMS[@]}"; do
        local build_dir="build_${platform,,}"
        if [ -f "$build_dir/yolo_demo" ]; then
            echo "  ✓ $platform: $build_dir/yolo_demo"
        fi
    done
    
    echo ""
    echo "Next steps:"
    echo "1. Test locally: ./build_xt5/yolo_demo /path/to/image.jpg"
    echo "2. Package for deployment (use existing packaging scripts)"
    echo "3. Deploy to BrightSign player"
}

# Run main function if script is executed directly  
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi